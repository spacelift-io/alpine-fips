name: Publish ðŸš€

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  deployment:
    strategy:
      matrix:
        target: [base, gcp]
    name: Publish the image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      OPENSSL_VERSION: "3.1.2"
    steps:
      - name: Check out repository code
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to GitHub registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Bake the ${{ matrix.target }} image
        uses: docker/bake-action@v6
        with:
          targets: ${{ matrix.target }}
          push: true
          set: |
            ${{ matrix.target }}.tags=ghcr.io/spacelift-io/alpine-fips:${{ matrix.target }}-latest
            ${{ matrix.target }}.tags=ghcr.io/spacelift-io/alpine-fips:${{ matrix.target }}-${{ github.sha }}

      - name: Push tag
        continue-on-error: true # The tag may exist already
        run: |
          git config --local user.email "cicd@spacelift.io"
          git config --local user.name "Spacelift CI/CD"
          git tag -a ${{ env.OPENSSL_VERSION }} -m "OpenSSL v${{ env.OPENSSL_VERSION }}"
          git push origin ${{ env.OPENSSL_VERSION }}

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.OPENSSL_VERSION }}
          tag: ${{ env.OPENSSL_VERSION }}
          makeLatest: true
          skipIfReleaseExists: true # Skip if the release already exists
          body: |
            Release of OpenSSL FIPS ${{ env.OPENSSL_VERSION }}.

            To use it in your Dockerfile, add the following lines:
            ```dockerfile
            FROM ghcr.io/spacelift-io/alpine-fips:base-latest
            
            FROM ghcr.io/spacelift-io/alpine-fips:gcp-latest
            ```